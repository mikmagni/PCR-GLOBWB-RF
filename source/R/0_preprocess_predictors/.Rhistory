obsDaily2Monthly <- obsDailyNew %>% mutate(datetime = floor_date(obsDailyNew$datetime, 'month')) %>%
group_by(datetime) %>%
summarise(obs=mean(obs))
row.names(obsDaily2Monthly) <- NULL
}
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
station_no <- stationInfo$grdc_no[i]
print(station_no)
obsDaily <- vroom(paste0(grdcDailyDir, 'grdc_daily_',station_no,'.csv'), show_col_types=FALSE) %>%
mutate(datetime=as.Date(datetime))
dobsDailyExt <- merge(datesDaily,obsDaily, all=T)
obsDailyNew <- obsDailyExt[which(obsDailyExt$datetime==startDate):which(obsDailyExt$datetime==endDateDaily),] %>%
mutate(datetime=as.Date(datetime)) %>% replace_with_na(replace = list(obs = -999))
####-------------------------------####
source('../../fun_0_loadLibrary.R')
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_grdc/code/0_preprocess_grdc_discharge.R", echo=TRUE)
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_predictors")
####-------------------------------####
source('fun_0_loadLibrary.R')
####-------------------------------####
source('../fun_0_loadLibrary.R')
stationInfo <- read.csv('../../../data/stationLatLon.csv')
#grdc stations full time series
filePathGrdc <- paste0('../../../data/preprocess/grdc_discharge/')
filePathStatevars <- paste0('../../../data/preprocess/pcr_statevars/')
#pcr-globwb time series 1979-2019
filePathDischarge <- paste0('../../../data/preprocess/pcr_discharge/')
filePathStatevars <- paste0('../../../data/preprocess/pcr_statevars/')
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
i=1
dir.create(outputDir, showWarnings=FALSE, recursive=TRUE)
outputDir <- '../../../data/predictors/pcr_qstatevars/'
dir.create(outputDir, showWarnings=FALSE, recursive=TRUE)
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
station_no <- stationInfo$grdc_no[i]
upstreamArea <- stationInfo$area[i]
####-------discharge-------####
obs <- read.csv(paste0(filePathGrdc, 'grdc_', station_no, '.csv')) %>%
mutate(datetime=dates)
pcr <- read.csv(paste0(filePathDischarge, 'pcr_discharge_', station_no, '.csv')) %>%
mutate(datetime=as.Date(datetime))
pred <- read.csv(paste0(filePathStatevars, 'pcr_statevars_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) %>%
select(-c('channelStorage', 'totLandSurfaceActuaET'))
stationInfo <- read.csv('../../../data/stationLatLon_catchAttr.csv')
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_predictors")
source('fun_0_preprocess_catchAttr.R')
# mclapply(1:length(fileListDischarge), create_predictor_table, mc.cores=24)
lapply(1:nrow(stationInfo), create_predictor_table)
# mclapply(1:length(fileListDischarge), create_predictor_table, mc.cores=24)
pblapply(1:nrow(stationInfo), create_predictor_table)
nrow(stationInfo)
View(stationInfo)
####-------------------------------####
source('../fun_0_loadLibrary.R')
stationInfo <- read.csv('../../../data/stationLatLon.csv')
stationInfo <- read.csv('../../../data/stationLatLon.csv')
#pcr-globwb time series 1979-2019
filePathDischarge <- '/scratch/6574882/pcr_discharge/'
filePathStatevars <- '/scratch/6574882/pcr_statevars/'
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F)
View(upstreamArea)
colnames(upstreamArea) <- c('lon','lat','area_pcr')
View(upstreamArea)
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F) %>%
mutate(colnames(upstreamArea) = c('lon','lat','area_pcr')) %>%
mutate(area_pcr = area_pcr/1000000)
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F) %>%
mutate(colnames(upstreamArea) = c('lon','lat','area_pcr')) %>%
mutate(.,area_pcr = area_pcr/1000000)
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F) %>%
mutate(colnames(upstreamArea) = c('lon','lat','area_pcr')) #%>%
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F)# %>%
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F)
colnames(upstreamArea) <- c('lon','lat','area_pcr')
upstreamArea$area_pcr <- upstreamArea$area_pcr/1000000
View(upstreamArea)
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F)
colnames(upstreamArea) <- c('lon','lat','area_pcr')
View(upstreamArea)
upstreamArea$area_pcr <- upstreamArea$area_pcr/1000000
outputDir <- '/scratch/6574882/predictors/pcr_qstatevars/'
dir.create(outputDir, showWarnings = FALSE, recursive = TRUE)
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
i=1
station_no <- stationInfo$grdc_no[i]
upstreamArea <- upstreamArea$area_pcr[i]
####-------discharge-------####
pcr <- read.csv(paste0(filePathDischarge, 'pcr_discharge_', station_no, '.csv')) %>%
mutate(datetime=as.Date(datetime))
#pcr-globwb time series 1979-2019
filePathDischarge <- '../../../data/preprocess/pcr_discharge/'
filePathStatevars <- '../../../data/preprocess/pcr_statevars/'
upstreamArea <- read.csv('../../../data/upstream_area.txt', sep = "" , header = F)
colnames(upstreamArea) <- c('lon','lat','area_pcr')
upstreamArea$area_pcr <- upstreamArea$area_pcr/1000000
outputDir <- '/scratch/6574882/predictors/pcr_qstatevars/'
dir.create(outputDir, showWarnings = FALSE, recursive = TRUE)
# datetime as pcr-globwb run
startDate <- '1979-01-01'
endDate <- '2019-12-31'
dates <- seq(as.Date("1979-01-01"), as.Date("2019-12-31"), by="month")
i=1
station_no <- stationInfo$grdc_no[i]
upstreamArea <- upstreamArea$area_pcr[i]
####-------discharge-------####
pcr <- read.csv(paste0(filePathDischarge, 'pcr_discharge_', station_no, '.csv')) %>%
mutate(datetime=as.Date(datetime))
pred <- read.csv(paste0(filePathStatevars, 'pcr_statevars_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) %>%
select(-c('channelStorage', 'totLandSurfaceActuaET'))
# join obs pcr discharge in dataframe and normalize to area
# m3/s to m/d
q <- pcr
q <- ((q[,-1])/upstreamArea*0.0864) %>%
cbind(datetime=q$datetime, .)
# join obs pcr discharge in dataframe and normalize to area
# m3/s to m/d
q <- pcr
q <- ((q[,-1])/upstreamArea*0.0864) %>%
rbind(datetime=q$datetime, .)
# join obs pcr discharge in dataframe and normalize to area
# m3/s to m/d
q <- pcr
View(q)
# join obs pcr discharge in dataframe and normalize to area
# m3/s to m/d
q <- pcr %>% mutate(pcr=pcr/upstreamArea*0.0864)
View(q)
####-------discharge-------####
pcr <- read.csv(paste0(filePathDischarge, 'pcr_discharge_', station_no, '.csv')) %>%
mutate(datetime=as.Date(datetime)) %>% mutate(pcr=pcr/upstreamArea*0.0864)
pred_table <- inner_join(pcr, pred_norm, by='datetime')
pred_norm <- pred %>% select(-datetime)
pred_norm <- scale(pred_norm) %>%
cbind(pred %>% select(datetime),.) %>%
mutate(datetime=as.Date(datetime))
pred_norm[is.na(pred_norm)] <- 0
pred_table <- inner_join(pcr, pred_norm, by='datetime')
View(pred_table)
outputDir <- '../../../XG/tune/'
dir.create(outputDir, showWarnings = F, recursive = T)
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/2_1_xgBoost")
#--------------XG---------------
#-----------0.5. Generate bootstrapped dataset-----------#
source('2_XG_0_bootstrapXG.R')
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
max_depth = c(6, 9, 20, 30),
# max_depth = 9,
nrounds = 100,
# default values below
eta=0.3,
# eta = c(0.05,0.1,0.2,0.3),
# eta=seq(0.05,0.3,by=0.5),
gamma = 0,
subsample = 1,
# min_child_weight = 1,
min_child_weight = c(0.5,1,5,10),
colsample_bytree = c(0.4,0.6,0.8,1.0)
# colsample_bytree = 1
# nround=100,
# max_depth=seq(20,30,by=3),
# OOB_RMSE = 0
)
#### run xgboost for different parameter sets, evaluate with out-of-bag RMSE ####
source('fun_2_1_hyperTuningXG.R')
hyper_trains <- lapply(1:nrow(hyper_grid), hyper_tuningXG)
#### save error table to find optimal parameters ####
for(i in 1:nrow(hyper_grid)){
# hyper_grid$nround[i] <- hyper_trains[[i]][[1]]$niter
# hyper_grid$max_depth[i] <- hyper_trains[[i]][[1]]$params$max_depth
hyper_grid$OOB_RMSE[i] <- hyper_trains[[i]]$OOB_RMSE
}
write.csv(hyper_grid, paste0(outputDir, 'hyper_grid.csv'), row.names = F)
View(hyper_grid)
?xgboost
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
max_depth = c(6, 20, 25, 30),
# max_depth = 9,
nrounds = 100,
# default values below
eta=c(0.1,0.2,0.3),
# eta = c(0.05,0.1,0.2,0.3),
# eta=seq(0.05,0.3,by=0.5),
gamma = 0,
subsample = 1,
# min_child_weight = 1,
min_child_weight = c(5,10,15,20),
colsample_bytree = c(0.2,0.4,0.6,1.0)
# colsample_bytree = 1
# nround=100,
# max_depth=seq(20,30,by=3),
# OOB_RMSE = 0
)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
max_depth = c(20, 25, 30),
# max_depth = 9,
nrounds = 100,
# default values below
eta=c(0.1,0.2,0.3),
# eta = c(0.05,0.1,0.2,0.3),
# eta=seq(0.05,0.3,by=0.5),
gamma = 0,
subsample = 1,
# min_child_weight = 1,
min_child_weight = c(5,10,15,20),
colsample_bytree = c(0.2,0.4,0.6,1.0)
# colsample_bytree = 1
# nround=100,
# max_depth=seq(20,30,by=3),
# OOB_RMSE = 0
)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
max_depth = c(20, 25, 30),
# max_depth = 9,
nrounds = 100,
# default values below
eta=c(0.1,0.2,0.3),
# eta = c(0.05,0.1,0.2,0.3),
# eta=seq(0.05,0.3,by=0.5),
gamma = 0,
subsample = 1,
# min_child_weight = 1,
min_child_weight = c(10,15,20),
colsample_bytree = c(0.2,0.4,0.6,1.0)
# colsample_bytree = 1
# nround=100,
# max_depth=seq(20,30,by=3),
# OOB_RMSE = 0
)
#### run xgboost for different parameter sets, evaluate with out-of-bag RMSE ####
source('fun_2_1_hyperTuningXG.R')
hyper_trains <- lapply(1:nrow(hyper_grid), hyper_tuningXG)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
# 1. fixed eta=0.3 (def), ideal nround=100
eta=0.3,
nrounds = 100,
# 2. tree-specific parameters
# 2.1. max_depth, min_child_weight
max_depth = c(5,10, 15, 20, 25, 30),
min_child_weight = c(1,5,10,15,20,25,30),
# 2.2. gamma
gamma = 0,
# 2.3. subsample and colsample_by_tree
subsample = 1,
colsample_bytree = 1,
# colsample_bytree = c(0.2,0.4,0.6,0.8,1.0),
# 3. regularization parameters
lambda = 1,
alpha = 0
# 4. lower learning rate
# eta=c(0.01,0.1,0.2,0.3)
)
#### run xgboost for different parameter sets, evaluate with out-of-bag RMSE ####
source('fun_2_1_hyperTuningXG.R')
hyper_trains <- lapply(1:nrow(hyper_grid), hyper_tuningXG)
#### save error table to find optimal parameters ####
for(i in 1:nrow(hyper_grid)){
# hyper_grid$nround[i] <- hyper_trains[[i]][[1]]$niter
# hyper_grid$max_depth[i] <- hyper_trains[[i]][[1]]$params$max_depth
hyper_grid$OOB_RMSE[i] <- hyper_trains[[i]]$OOB_RMSE
}
print(paste0('output csv file: ', outputDir, 'hyper_grid.csv'))
write.csv(hyper_grid, paste0(outputDir, 'hyper_grid.csv'), row.names = F)
View(hyper_grid)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
# 1. fixed eta=0.3 (def), ideal nround=100
eta=0.3,
nrounds = 100,
# 2. tree-specific parameters
# 2.1. max_depth, min_child_weight
max_depth = seq(20,30,by=1),
min_child_weight = seq(20,30,by=1),
# 2.2. gamma
gamma = 0,
# 2.3. subsample and colsample_by_tree
subsample = 1,
colsample_bytree = 1,
# colsample_bytree = c(0.2,0.4,0.6,0.8,1.0),
# 3. regularization parameters
lambda = 1,
alpha = 0
# 4. lower learning rate
# eta=c(0.01,0.1,0.2,0.3)
)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
# 1. fixed eta=0.3 (def), ideal nround=100
eta=0.3,
nrounds = 100,
# 2. tree-specific parameters
# 2.1. max_depth, min_child_weight
max_depth = seq(20,30,by=2),
min_child_weight = seq(20,30,by=2),
# 2.2. gamma
gamma = 0,
# 2.3. subsample and colsample_by_tree
subsample = 1,
colsample_bytree = 1,
# colsample_bytree = c(0.2,0.4,0.6,0.8,1.0),
# 3. regularization parameters
lambda = 1,
alpha = 0
# 4. lower learning rate
# eta=c(0.01,0.1,0.2,0.3)
)
#-----------1. Tune parameter---------------
#create grid of parameters to test
hyper_grid <- expand.grid(
# 1. fixed eta=0.3 (def), ideal nround=100
eta=0.3,
nrounds = 100,
# 2. tree-specific parameters
# 2.1. max_depth, min_child_weight
max_depth = seq(8,12,by=1),
min_child_weight = seq(8,12,by=2),
# 2.2. gamma
gamma = 0,
# 2.3. subsample and colsample_by_tree
subsample = 1,
colsample_bytree = 1,
# colsample_bytree = c(0.2,0.4,0.6,0.8,1.0),
# 3. regularization parameters
lambda = 1,
alpha = 0
# 4. lower learning rate
# eta=c(0.01,0.1,0.2,0.3)
)
#### run xgboost for different parameter sets, evaluate with out-of-bag RMSE ####
source('fun_2_1_hyperTuningXG.R')
hyper_trains <- lapply(1:nrow(hyper_grid), hyper_tuningXG)
#### save error table to find optimal parameters ####
for(i in 1:nrow(hyper_grid)){
# hyper_grid$nround[i] <- hyper_trains[[i]][[1]]$niter
# hyper_grid$max_depth[i] <- hyper_trains[[i]][[1]]$params$max_depth
hyper_grid$OOB_RMSE[i] <- hyper_trains[[i]]$OOB_RMSE
}
library(tidymodels)
library(tidymodels)
outputDir <- '../../../XG/tune/'
dir.create(outputDir, showWarnings = F, recursive = T)
#--------------XG---------------
#-----------0.5. Generate bootstrapped dataset-----------#
pred_df <- vroom('../../../XG/xg_input/train_table_allpredictors.csv', show_col_type=F) %>% select(., -datetime)
set.seed(123)
pred_split <- initial_split(pred_df, strata = win)
?initial_split
pred_split <- initial_split(pred_df, prop=0.63, strata = obs)
pred_train <- training(pred_split)
pred_test <- testing(pred_split)
View(pred_test)
?xgb_spec
?boost_tree
#-----------1. Tune parameter---------------
xgb_spec <- boost_tree(
trees = 1000,
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),                     ## first three: model complexity
sample_size = tune(),
mtry = tune(),         ## randomness
learn_rate = tune(),                         ## step size
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_spec
#-----------1. Tune parameter---------------
# create hyperparameter grid
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), vb_train),
learn_rate(),
size = 30
)
#-----------1. Tune parameter---------------
# create hyperparameter grid
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), pred_train),
learn_rate(),
size = 30
)
xgb_grid
#workflow
xgb_wf <- workflow() %>%
add_formula(obs ~ .) %>%
add_model(xgb_spec)
xgb_wf
#cross-validation resamples
set.seed(123)
pred_folds <- vfold_cv(pred_train, strata = obs)
pred_folds
?registerDoParallel
source("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/2_1_xgBoost/2_XG_1_tidytune.R", echo=TRUE)
####-------------------------------####
source('../fun_0_loadLibrary.R')
outputDir <- '../../../XG/tune/'
dir.create(outputDir, showWarnings = F, recursive = T)
#--------------XG---------------
#-----------0.5. Generate bootstrapped dataset-----------#
pred_df <- vroom('../../../XG/xg_input/train_table_allpredictors.csv', show_col_type=F) %>% select(., -datetime)
set.seed(123)
pred_split <- initial_split(pred_df, prop=0.63, strata = obs)
pred_train <- training(pred_split)
pred_test <- testing(pred_split)
#-----------1. Tune parameter---------------
# tune hyperaparameters
xgb_spec <- boost_tree(
trees = 1000,
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),                     ## first three: model complexity
sample_size = tune(),
mtry = tune(),         ## randomness
learn_rate = tune(),                         ## step size
) %>%
set_engine("xgboost") %>%
set_mode("regression")
# create hyperparameter grid
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), pred_train),
learn_rate(),
size = 30
)
xgb_grid
View(xgb_grid)
#workflow
xgb_wf <- workflow() %>%
add_formula(obs ~ .) %>%
add_model(xgb_spec)
xgb_wf
#cross-validation resamples
set.seed(123)
pred_folds <- vfold_cv(pred_train, strata = obs)
pred_folds
doParallel::registerDoParallel()
set.seed(234)
xgb_res <- tune_grid(
xgb_wf,
resamples = pred_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
setwd("C:/Users/6574882/AppData/Roaming/MobaXterm/home/PCR-GLOBWB-RF/v0.8.5 - 4px/code/.R/0_preprocess_predictors")
stationInfo <- read.csv('../../../data/stationLatLon.csv')
filePathCatchAttr <- paste0('../../../data/predictors/pcr_allpredictors/')
filePathCatchAttr <- paste0('../../../data/predictors/pcr_parameters/')
filePathStatevars <- paste0('../../../data/predictors/pcr_qstatevars/')
outputDir <- '../../../data/predictors/pcr_meteo_catchAttr/'
dir.create(outputDir, showWarnings = FALSE, recursive = TRUE)
i=1
station_no <- stationInfo$grdc_no[i]
print(station_no)
CatchAttrTable <- read.csv(paste0(filePathCatchAttr , 'pcr_parameters_',station_no,'.csv'))
meteo_catchAttr <- read.csv(paste0(filePathAllPred , 'pcr_allpredictors_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime))#%>%
filePathAllPred <- paste0('../../../data/predictors/pcr_allpredictors/')
outputDir <- '../../../data/predictors/pcr_meteo_catchAttr/'
dir.create(outputDir, showWarnings = FALSE, recursive = TRUE)
station_no <- stationInfo$grdc_no[i]
print(station_no)
meteo_catchAttr <- read.csv(paste0(filePathAllPred , 'pcr_allpredictors_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime))#%>%
View(meteo_catchAttr)
names(meteo_catchAttr)
meteo_catchAttr <- read.csv(paste0(filePathAllPred , 'pcr_allpredictors_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) %>% select(datetime, precipitation:referencePotET, area_pcr:aridityIdx)
View(meteo_catchAttr)
meteo_catchAttr <- read.csv(paste0(filePathAllPred , 'pcr_allpredictors_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) #%>% select(datetime, precipitation:referencePotET, area_pcr:aridityIdx)
names(meteo_catchAttr)
meteo_catchAttr <- read.csv(paste0(filePathAllPred , 'pcr_allpredictors_',station_no,'.csv')) %>%
mutate(datetime=as.Date(datetime)) %>% select(datetime, obs, precipitation:referencePotET, area_pcr:aridityIdx)
train_data <- vroom(paste0('../../../RF/rf_input/train_table_allpredictors.csv'),
show_col_types = F)
train_data <- vroom('../../../RF/rf_input/train_table.csv', show_col_type=F)
